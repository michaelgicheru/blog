---
title: "'as_triangle' - Wrapper Function"
description: |
  In which I look at the 'as.triangle()' function from the {ChainLadder} package
date: "2025-02-21"
categories: [R, Reserving]
image: "triangle.jpg"
image-alt: "A picture of a triangle"
---

The {ChainLadder} package is described as "an R package providing methods and models which are typically used in insurance claims reserving". I was recently tasked with moving our claims reserving models from excel to R, as our models are getting too big to handle (some of them are pushing 1GB). The {ChainLadder} package exposes functions that have been incredibly useful and time-saving for me during this exercise. These functions include, converting long data into wide data i.e triangle (more on this later), calculating development factors and "predict" functions for calculating ultimate claims reserves. To be honest, all I had to do was manipulate our claims data into a usable format for the {ChainLadder} suite of functions, plug the data through them and finally create outputs in excel summarizing the final reserves. 

That being said, there are a few "gotchas" that I have encountered that I think are worth writing about. I also worked out some solutions that hopefully address some of these "gotchas". I discuss one of them here.

## Quick Tutorial

Historical insurance data is typically represented in a triangle structure or wide format, showing the development of claims over time for each origin period. The triangle makes it easy to see the development of claims from one development period to another. As an example, we use data from the Reinsurance Association of America (RAA):

```{r libraries}
#| warning: false
#| message: false
library(ChainLadder)
```

```{r example_1}
RAA
```

From left to right, we can see the initial claim amount for all origin years under development "dev" period 1 and annual evaluations thereafter. A human could easily intuit the development of claims from this wide format. However, data is stored in a long format, where a variable has its own column and each row is an observation:

```{r example_2}
filename <-  file.path(system.file("Database",
                                   package="ChainLadder"),
                       "TestData.csv")
myData <- read.csv(filename)
raa <- subset(myData, lob %in% "RAA")
head(raa)
```

How do we get from long to wide? {ChainLadder} provides a function for this called `as.triangle`, which converts data into a triangle format. Let's test this out:

```{r example_3}
raa.tri <- as.triangle(
  Triangle = raa,
  origin = "origin",
  dev = "dev"
)

raa.tri
```

You may have noticed that this is not the same triangle as what was shown above. This is because `RAA` is a cumulative triangle while `raa.tri` is an incremental triangle. We use `incr2cum` to turn an incremental triangle into a cumulative one:

```{r incr2cum}
raa.cum <- incr2cum(Triangle = raa.tri, na.rm = FALSE)
raa.cum
```

Pretty straight forward, I would say. In a perfect world, these functions are enough. Unfortunately, I don't leave in a perfect world. Let's put these functions through their paces.

## The problem

```{r import}
#| include: false
dir <- here::here("posts/2025-01-21_triangle")
raa.example <- read.csv(here::here(dir, "test_edit.csv"))
```

I have adjusted the RAA long data to have some gaps in the years and removed one development period at the end. This is how it looks like now:

```{r example_4}
new_raa <- as.triangle(
  Triangle = raa.example
)

new_raa
```

Make it into a cumulative triangle:

```{r example_cum}
new_raa_cum <- incr2cum(new_raa)
new_raa_cum
```

You may have noticed NAs in periods we have observations in for example dev 9 for 1981. We can fix this with the `na.rm` argument:

```{r narm}
new_raa_cum <- incr2cum(new_raa, na.rm = TRUE)
new_raa_cum
```

This fixes some of the issues but there is one glaring problem left. This triangle is not really "square". Checking the diagonal, we can see a missing value where you would not expect to see one, i.e. for the development year 1986, dev period 5. You would expect that since there was no observation for that development period, the cumulative amount would be 11702, however, in its stead there is a missing value. 

Why did this happen? This is because the `incr2cum` function assumes the triangle is half of a perfect square, where the number of development periods is equal to the number of origin periods. This assumption fails in a lot of cases. In particular, this assumption fails for long tail classes, where there are some development periods when no new claims are recorded for a while. Someone opened an [issue](https://github.com/mages/ChainLadder/issues/93) on the {ChainLadder} github page that does a good job of explaining this.

This is a problem because it breaks a lot of downstream functions that are essential in predicting the ultimate claims. I won't go into these downstream functions here but I will provide a potential solution for this.

## The solution

To fix this, we can make a wrapper function; call it `as_triangle` that creates a skeleton of all unique origin periods, then creating development periods based on the length of the unique periods. 

```{r as_triangle}
as_triangle <- function(data, origin, dev, value) {
  # create skeleton
  unique_origins <- unique(data[[origin]]) # get unique origin periods
  dev_period <- 1:(length(unique_origins)) # create development periods
  triangle_skeleton <- expand.grid(unique_origins, dev_period, stringsAsFactors = FALSE)
  names(triangle_skeleton) <- c(origin, dev)  

  complete_skeleton <- merge(triangle_skeleton, data[, c(origin, dev, value)], by = c(origin, dev), all.x = TRUE)
  incremental_triangle <- ChainLadder::as.triangle(
    Triangle = complete_skeleton,
    origin = origin,
    dev = dev,
    value = value
  )

  return(incremental_triangle)
}
```

Let's test this out:

```{r as_triangle_example}
new_raa_fix <- as_triangle(data = raa.example, origin = "origin", dev = "dev", value = "value")
new_raa_fix
```

The cumulative triangle will now be:

```{r as_triangle_cum}
new_raa_fix_cum <- incr2cum(Triangle = new_raa_fix, na.rm = TRUE)
new_raa_fix_cum
```

This is now a perfect square. There is a caveat to this function though; it assumes that the delay , i.e. the period between two development periods, is one. There are some triangles that are quarterly unlike the yearly example here, where development periods are labelled as 3, 9, 12... We can adjust the function further:

```{r as_triangle_2}
as_triangle <- function(data, origin, dev, value, delay = 1, start = 1) {
  # create skeleton
  unique_origins <- unique(data[[origin]]) # get unique origin periods
  dev_period <- seq(from = start, to = length(unique_origins), by = delay) # create development periods
  triangle_skeleton <- expand.grid(unique_origins, dev_period, stringsAsFactors = FALSE)
  names(triangle_skeleton) <- c(origin, dev)  

  complete_skeleton <- merge(triangle_skeleton, data[, c(origin, dev, value)], by = c(origin, dev), all.x = TRUE)
  incremental_triangle <- ChainLadder::as.triangle(
    Triangle = complete_skeleton,
    origin = origin,
    dev = dev,
    value = value
  )

  return(incremental_triangle)
}
```

With this, you need to know the delay beforehand. This is what I currently use for the IBNR exercise and I have not encountered any issues with it. However, don't take my word for it. You can find the function in this [github repository](https://github.com/michaelgicheru/as_triangle). You can adjust the function to suite your use case.

If you can think of any other solutions, please share!

## Acknowledgements

I would like to acknowledge the person who opened the github [issue](https://github.com/mages/ChainLadder/issues/93). They provide an excellent explanation of the problem and inspired the solution in this blog.